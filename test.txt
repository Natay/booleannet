> make test
python tests/test_all.py 
test_cycle_detection (test_sync.SyncTest)
Testing cycle detection ... ok
test_initializer (test_sync.SyncTest)
Testing initializer ... ok
test_modeline (test_sync.SyncTest)
Basic operation ... ok
test_random_rules (test_sync.SyncTest)
Testing rules (stress test) ... A=False
B=True
C=True
D=False
E=True
F=True
G=False
H=True
I=True
J=True
K=False
L=True
M=False
N=True
O=True
P=False
Q=True
R=False
S=True
T=False
U=False
V=False
W=True
X=True
Y=False
Z=False
1: A* = ((K and J)) and N
1: B* = not ((K) or not W)
1: C* = not ((N or Z)) or not S
1: D* = not (M and not (U) and Y)
1: E* = K and M
1: F* = ((B and not not A))
1: G* = not ((B)) or not V
1: H* = T and not not W
1: I* = ((D and not not A) and A)
1: J* = not (Z or (A) or not B)
1: K* = not ((X) or not V)
1: L* = K or C and H
1: M* = not ((W or not N or H))
1: N* = J or not not J
1: O* = not ((I or not Y))
1: P* = ((V) or F)
1: Q* = (M and (D)) or H
1: R* = not ((Z)) or not K
1: S* = ((T) or not not I)
1: T* = ((D or not not I or R))
1: U* = (M or (L or not not C))
1: V* = W or not Z or not K
1: W* = ((S)) and J
1: X* = not ((J) or not G)
1: Y* = (H and (I) or C)
1: Z* = not B or L and not H


State: A=False, B=False, C=False, D=True, E=False, F=False, G=True, H=True, I=True, J=False, K=True, L=True, M=False, N=False, O=False, P=True, Q=True, R=True, S=True, T=True, U=True, V=True, W=False, X=False, Y=False, Z=True
Node oldval newval
A False False
B True False
FAIL

======================================================================
FAIL: test_random_rules (test_sync.SyncTest)
Testing rules (stress test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/natay/Desktop/booleannet/tests/test_sync.py", line 220, in test_random_rules
    self.EQ( oldval, newval )
AssertionError: True != False

----------------------------------------------------------------------
Ran 4 tests in 0.042s

FAILED (failures=1)
